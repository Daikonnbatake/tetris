/***********************************************************************
 *
 *   UI 同士の関係性を表すクラス.
 *
***********************************************************************/

class UIRelation
{
    #child;  // UIElement | null: 子要素.
    #left;   // UIElement | null: 自分の左隣.
    #right;  // UIElement | null: 自分の右隣.
    #top;    // UIElement | null: 自分の上隣.
    #bottom; // UIElement | null: 自分の下隣.
    #goBack; // bool:             決定されたとき前の階層に戻るかどうか.


    /*-----------------------------------------------------------------+
    *
    * 説明: コンストラクタ.
    *
    * 引数:
    *   bool goBack: 自分が決定されたとき前の階層に戻るなら true (任意).
    *
    +-----------------------------------------------------------------*/
    constructor(goBack = false)
    {
        this.#child  = null;
        this.#left   = null;
        this.#right  = null;
        this.#top    = null;
        this.#bottom = null;
        this.#goBack = goBack;
    }


    /*-----------------------------------------------------------------+
    *
    * 説明: 子要素を取得する.
    *
    * 戻り値:
    *   UIElement | null: 子要素.
    *
    +-----------------------------------------------------------------*/
    GetChild()
    {
        return this.#child;
    }


    /*-----------------------------------------------------------------+
    *
    * 説明: 左隣の要素を取得する.
    *
    * 戻り値:
    *   UIElement | null: 左隣の要素.
    *
    +-----------------------------------------------------------------*/
    GetLeft()
    {
        return this.#left;
    }


    /*-----------------------------------------------------------------+
    *
    * 説明: 右隣の要素を取得する.
    *
    * 戻り値:
    *   UIElement | null: 右隣の要素.
    *
    +-----------------------------------------------------------------*/
    GetRight()
    {
        return this.#right;
    }


    /*-----------------------------------------------------------------+
    *
    * 説明: 上隣の要素を取得する.
    *
    * 戻り値:
    *   UIElement | null: 上隣の要素.
    *
    +-----------------------------------------------------------------*/
    GetTop()
    {
        return this.#top;
    }


    /*-----------------------------------------------------------------+
    *
    * 説明: 下隣の要素を取得する.
    *
    * 戻り値:
    *   UIElement | null: 下隣の要素.
    *
    +-----------------------------------------------------------------*/
    GetBottom()
    {
        return this.#bottom;
    }


    /*-----------------------------------------------------------------+
    *
    * 説明: 自分が決定されたとき前の階層に戻るなら true.
    *
    * 戻り値:
    *   bool: 自分が決定されたとき前の階層に戻るかどうか.
    *
    +-----------------------------------------------------------------*/
    PushPositiveToBack()
    {
        return this.#goBack;
    }


    /*-----------------------------------------------------------------+
    *
    * 説明: 子要素を設定する.
    *
    * 引数:
    *   UIElement: 子要素.
    *
    +-----------------------------------------------------------------*/
    SetChild(element)
    {
        this.#child = element;
    }


    /*-----------------------------------------------------------------+
    *
    * 説明: 左隣の要素を設定する.
    *
    * 引数:
    *   UIElement: 左隣の要素.
    *
    +-----------------------------------------------------------------*/
    SetLeft(element)
    {
        this.#left = element;
    }


    /*-----------------------------------------------------------------+
    *
    * 説明: 右隣の要素を設定する.
    *
    * 引数:
    *   UIElement: 右隣の要素.
    *
    +-----------------------------------------------------------------*/
    SetRight(element)
    {
        this.#right = element;
    }


    /*-----------------------------------------------------------------+
    *
    * 説明: 上隣の要素を設定する.
    *
    * 引数:
    *   UIElement: 上隣の要素.
    *
    +-----------------------------------------------------------------*/
    SetTop(element)
    {
        this.#top = element;
    }


    /*-----------------------------------------------------------------+
    *
    * 説明: 下隣の要素を設定する.
    *
    * 引数:
    *   UIElement: 下隣の要素.
    *
    +-----------------------------------------------------------------*/
    SetBottom(element)
    {
        this.#bottom = element;
    }
}